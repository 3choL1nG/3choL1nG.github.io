[{"title":"Mybaties-1","url":"/2021/09/30/Mybaties-1/","content":"一.Mybatis快速入门1.1 框架介绍\n框架是一款半成品软件，我们可以基于这个半成品软件继续开发，来完成我们个性化的需求！\n\n如图:\n\n\n\n1.2 ORM介绍\nORM(Object Relational Mapping)： 对象关系映射\n\n指的是持久化数据和实体对象的映射模式，为了解决面向对象与关系型数据库存在的互不匹配的现象的技术。\n\n如图:\n\n\n具体映射关系如下图:\n\n\n\n1.3 原始jdbc操作（查询数据）\n1.4原始jdbc操作（插入数据）\n1.5 原始jdbc操作的分析\n原始 JDBC 的操作问题分析 \n​    1.频繁创建和销毁数据库的连接会造成系统资源浪费从而影响系统性能。\n\nsql 语句在代码中硬编码，如果要修改 sql 语句，就需要修改 java 代码，造成代码不易维护。\n查询操作时，需要手动将结果集中的数据封装到实体对象中。\n增删改查操作需要参数时，需要手动将实体对象的数据设置到 sql 语句的占位符。 \n\n\n原始 JDBC 的操作问题解决方案 \n​    1.使用数据库连接池初始化连接资源。 \n\n将 sql 语句抽取到配置文件中。 \n使用反射、内省等底层技术，将实体与表进行属性与字段的自动映射    \n\n\n\n1.6 什么是Mybatismybatis 是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。\nmybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。\n最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。\nMyBatis官网地址：http://www.mybatis.org/mybatis-3/ \n1.7  Mybatis的快速入门MyBatis开发步骤：\n①添加MyBatis的jar包\n②创建Student数据表\n③编写Studentr实体类 \n④编写映射文件StudentMapper.xml\n⑤编写核心文件MyBatisConfig.xml\n⑥编写测试类\n1.7.1  环境搭建1)导入MyBatis的jar包\n\nmysql-connector-java-5.1.37-bin.jar\nmybatis-3.5.3.jar\nlog4j-1.2.17.jar\n\n\n 创建student数据表\n\n\n\n编写Student实体\n\npublic class Student &#123;    private Integer id;    private String name;    private Integer age;    //省略get个set方法&#125;\n\n4)编写StudentMapper.xml映射文件\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!--MyBatis的DTD约束--&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--    mapper：核心根标签    namespace属性：名称空间--&gt;&lt;mapper namespace=&quot;StudentMapper&quot;&gt;    &lt;!--        select：查询功能的标签        id属性：唯一标识        resultType属性：指定结果映射对象类型        parameterType属性：指定参数映射对象类型    --&gt;    &lt;select id=&quot;selectAll&quot; resultType=&quot;student&quot;&gt;        SELECT * FROM student    &lt;/select&gt;&lt;/mapper&gt;\n\n\n编写MyBatis核心文件\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!--MyBatis的DTD约束--&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;!--configuration 核心根标签--&gt;&lt;configuration&gt;    &lt;!--引入数据库连接的配置文件--&gt;    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;    &lt;!--配置LOG4J--&gt;    &lt;settings&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;log4j&quot;/&gt;    &lt;/settings&gt;    &lt;!--起别名--&gt;    &lt;typeAliases&gt;        &lt;typeAlias type=&quot;com.itheima.bean.Student&quot; alias=&quot;student&quot;/&gt;        &lt;!--&lt;package name=&quot;com.itheima.bean&quot;/&gt;--&gt;    &lt;/typeAliases&gt;    &lt;!--environments配置数据库环境，环境可以有多个。default属性指定使用的是哪个--&gt;    &lt;environments default=&quot;mysql&quot;&gt;        &lt;!--environment配置数据库环境  id属性唯一标识--&gt;        &lt;environment id=&quot;mysql&quot;&gt;            &lt;!-- transactionManager事务管理。  type属性，采用JDBC默认的事务--&gt;            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;            &lt;!-- dataSource数据源信息   type属性 连接池--&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;!-- property获取数据库连接的配置信息 --&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot; /&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!-- mappers引入映射配置文件 --&gt;    &lt;mappers&gt;        &lt;!-- mapper 引入指定的映射配置文件   resource属性指定映射配置文件的名称 --&gt;        &lt;mapper resource=&quot;StudentMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;\n\n1.7.2编写测试代码/*    控制层测试类 */public class StudentController &#123;    //创建业务层对象    private StudentService service = new StudentServiceImpl();    //查询全部功能测试    @Test    public void selectAll() &#123;        List&lt;Student&gt; students = service.selectAll();        for (Student stu : students) &#123;            System.out.println(stu);        &#125;    &#125;&#125;\n\n1.8 知识小结\n框架       \n 框架是一款半成品软件，我们可以基于框架继续开发，从而完成一些个性化的需求。\n\nORM        \n对象关系映射，数据和实体对象的映射。\n\nMyBatis       \n 是一个优秀的基于 Java 的持久层框架，它内部封装了 JDBC。\n\n\n二. MyBatis的相关api2.1 Resources\norg.apache.ibatis.io.Resources：加载资源的工具类。\n\n核心方法\n\n\n\n2.2 构建器SqlSessionFactoryBuilder\norg.apache.ibatis.session.SqlSessionFactoryBuilder：获取 SqlSessionFactory 工厂对象的功能类\n\n核心方法\n\n\n通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象\n\n\nString resource = &quot;org/mybatis/builder/mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(inputStream);\n\n其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。\n2.3 工厂对象SqlSessionFactory\norg.apache.ibatis.session.SqlSessionFactory：获取 SqlSession 构建者对象的工厂接口。\n\n核心api\n\n\n\n2.4 SqlSession会话对象\norg.apache.ibatis.session.SqlSession：构建者对象接口。用于执行 SQL、管理事务、接口代理。\n\n核心api\n\n\n\nSqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。\n三.MyBatis 映射配置文件3.1 映射配置文件介绍\n映射配置文件包含了数据和对象之间的映射关系以及要执行的 SQL 语句\n\n\n\n3.2 查询功能\n属性        \n id：唯一标识， 配合名称空间使用。     \n parameterType：指定参数映射的对象类型。       \n resultType：指定结果映射的对象类型。\n\nSQL 获取参数:        #{属性名}\n\n示例\n\n\n\n####3.3 新增功能 \n\n：新增功能标签。\n\n属性        \nid：唯一标识， 配合名称空间使用。     \nparameterType：指定参数映射的对象类型。       \nresultType：指定结果映射的对象类型。\n\nSQL 获取参数:        #{属性名}\n\n\n\n示例\n\n\n3.4 修改功能\n属性        \nid：唯一标识， 配合名称空间使用。     \nparameterType：指定参数映射的对象类型。       \nresultType：指定结果映射的对象类型。\n\nSQL 获取参数:        #{属性名}\n\n\n\n示例\n\n\n3.5 删除功能\n：查询功能标签。\n\n属性        \nid：唯一标识， 配合名称空间使用。     \nparameterType：指定参数映射的对象类型。       \nresultType：指定结果映射的对象类型。\n\nSQL 获取参数:        #{属性名}\n\n\n\n示例\n\n\n总结： 大家可以发现crud操作，除了标签名称以及sql语句不一样之外，其他属性参数基本一致。\n\n\n3.6 映射配置文件小结\n四.Mybatis核心配置文件介绍4.1 核心配置文件介绍核心配置文件包含了 MyBatis 最核心的设置和属性信息。如数据库的连接、事务、连接池信息等。\n如下图:\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!--MyBatis的DTD约束--&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;!--configuration 核心根标签--&gt;&lt;configuration&gt;    &lt;!--environments配置数据库环境，环境可以有多个。default属性指定使用的是哪个--&gt;    &lt;environments default=&quot;mysql&quot;&gt;        &lt;!--environment配置数据库环境  id属性唯一标识--&gt;        &lt;environment id=&quot;mysql&quot;&gt;            &lt;!-- transactionManager事务管理。  type属性，采用JDBC默认的事务--&gt;            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;            &lt;!-- dataSource数据源信息   type属性 连接池--&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;!-- property获取数据库连接的配置信息 --&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///db1&quot; /&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;                &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!-- mappers引入映射配置文件 --&gt;    &lt;mappers&gt;        &lt;!-- mapper 引入指定的映射配置文件   resource属性指定映射配置文件的名称 --&gt;        &lt;mapper resource=&quot;StudentMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;\n\n4.2 数据库连接配置文件引入\nproperties标签引入外部文件\n&lt;!--引入数据库连接的配置文件--&gt;&lt;properties resource=&quot;jdbc.properties&quot;/&gt;\n具体使用，如下配置\n&lt;!-- property获取数据库连接的配置信息 --&gt;  &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;  &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt;  &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot; /&gt;  &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt;\n\n4.3 起别名\n：为全类名起别名的父标签。\n\n：为全类名起别名的子标签。\n\n属性      \n type：指定全类名      \n alias：指定别名\n\n：为指定包下所有类起别名的子标签。(别名就是类名)\n\n如下图：\n\n\n具体如下配置\n&lt;!--起别名--&gt;&lt;typeAliases&gt;    &lt;typeAlias type=&quot;com.itheima.bean.Student&quot; alias=&quot;student&quot;/&gt;    &lt;!--&lt;package name=&quot;com.itheima.bean&quot;/&gt;--&gt;&lt;/typeAliase\n\n4.4 总结\n五.Mybatis传统方式开发5.1 Dao 层传统实现方式\n分层思想：控制层(controller)、业务层(service)、持久层(dao)。\n\n调用流程\n\n\n\n5.2 LOG4J的配置和使用\n在日常开发过程中，排查问题时难免需要输出 MyBatis 真正执行的 SQL 语句、参数、结果等信息，我们就可以借助 LOG4J 的功能来实现执行信息的输出。\n\n使用步骤：\n\n\n\n"},{"title":"Hello World","url":"/2021/09/30/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"}]